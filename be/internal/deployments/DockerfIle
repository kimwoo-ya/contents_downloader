# Stage 1: Build the Go application
FROM golang:1.23-alpine AS builder

WORKDIR /app

# Copy module files and download dependencies
COPY go.mod go.sum ./
RUN go mod download

# Copy the rest of the source code
COPY . .

# Build the application for a Linux environment
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o /server ./cmd/contents_downloader/main.go

# Stage 2: Create the final lightweight image
FROM alpine:latest

WORKDIR /app

# Install dependencies required for yt-dlp using Alpine's package manager (apk)
# python3 and py3-pip are for yt-dlp, ffmpeg is for merging media formats
RUN apk add --no-cache python3 py3-pip ffmpeg yt-dlp

# Install yt-dlp using pip
#RUN pip3 install yt-dlp
#RUN apk add py3-yt-dlp

# Copy the compiled binary from the builder stage
COPY --from=builder /server /app/server

# Create a directory for downloads within the container
RUN mkdir -p /app/downloads

# Expose the port the app runs on
EXPOSE 8080

# Run the application
CMD ["/app/server"]